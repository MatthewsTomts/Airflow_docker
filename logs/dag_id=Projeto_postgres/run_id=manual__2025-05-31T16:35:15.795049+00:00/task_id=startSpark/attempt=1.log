{"timestamp":"2025-05-31T16:35:16.769509","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-31T16:35:16.770026","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/projeto1/projeto1.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-31T16:35:17.141834Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T16:35:18.322017Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T16:35:18.322220Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T16:35:18.322316Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T16:35:18.990168Z","level":"error","event":"25/05/31 16:35:18 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-05-31T16:35:21.677421","level":"info","event":"Done. Returned value was: <pyspark.sql.session.SparkSession object at 0x7fe21fe68b30>","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-05-31T16:35:21.677609","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01972732-94e3-7300-a669-12a90bf8a4fd'), task_id='startSpark', dag_id='Projeto_postgres', run_id='manual__2025-05-31T16:35:15.795049+00:00', try_number=1, map_index=-1, hostname='0ce5fa2f510c', context_carrier=None, task=<Task(PythonOperator): startSpark>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=5, start_date=datetime.datetime(2025, 5, 31, 16, 35, 16, 297802, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-05-31T16:35:21.677776","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"TypeError","exc_value":"cannot serialize object of type <class 'pyspark.sql.session.SparkSession'>","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":849,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1193,"name":"_push_xcom_if_needed"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":526,"name":"_xcom_push"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":64,"name":"set"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":283,"name":"serialize_value"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":185,"name":"serialize"}]}]}
